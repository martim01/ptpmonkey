#include "ptpmanager.h"
#include "asio.hpp"
#include "ptpparser.h"
#include "receiver.h"
#include "sender.h"
#include "ptpmanagerhandler.h"
#include <chrono>

PtpManager::PtpManager()
{

}

void PtpManager::Run()
{
    try
    {
        std::shared_ptr<Handler> pHandler = std::make_shared<PtpManagerHandler>(*this);

        asio::io_context io_context;
        Receiver r319(io_context, std::unique_ptr<Parser>(new PtpParser(pHandler)));
        r319.run(asio::ip::make_address("10.10.11.218"),asio::ip::make_address("224.0.1.129"), 319);

        Receiver r320(io_context, std::unique_ptr<Parser>(new PtpParser(pHandler)));
        r320.run(asio::ip::make_address("10.10.11.218"),asio::ip::make_address("224.0.1.129"), 320);

        Sender sDelay(*this, io_context, asio::ip::make_address("224.0.1.129"), 319);
        io_context.run();
    }
    catch (std::exception& e)
    {
        std::cerr << "Exception: " << e.what() << "\n";
    }
}


void PtpManager::AddDelayRequest(unsigned short nSequence, const time_s_ns& timestamp)
{

    m_mDelayRequest.insert(make_pair(nSequence, timestamp));
}


void PtpManager::Sync(std::shared_ptr<ptpV2Header> pHeader, std::shared_ptr<ptpV2Payload> pPayload)
{
    m_t1s = pPayload->originTime;
    m_t1r = pHeader->timestamp;
}

void PtpManager::DelayResponse(std::shared_ptr<ptpV2Header> pHeader, std::shared_ptr<ptpDelayResponse> pPayload)
{
    auto request = m_mDelayRequest.find(pHeader->nSequenceId);
    if(request != m_mDelayRequest.end())
    {
        m_t2s = request->second;
        m_t2r = pPayload->originTime;
        m_t3s = pPayload->originTime;
        m_t3r = pHeader->timestamp;

        std::cout << "T1\t" << TimeToString(m_t1s) << std::endl;
        std::cout << "T1'\t" << TimeToString(m_t1r) << std::endl;
        std::cout << "T2\t" << TimeToString(m_t2s) << std::endl;
        std::cout << "T2'\t" << TimeToString(m_t2r) << std::endl;
        std::cout << "T3\t" << TimeToString(m_t3s) << std::endl;
        std::cout << "T3'\t " << TimeToString(m_t3r) << std::endl;
        std::cout << "T1'-T1\t" << TimeToString(Minus(m_t1r,m_t1s)) << std::endl;
        std::cout << "T2'-T1\t" << TimeToString(Minus(m_t2r,m_t2s)) << std::endl;


        m_offset = Divide(Add(Minus(Minus(m_t1r, m_t1s), m_t2r),m_t2s),2);
        m_delay = Minus(Minus(m_t1r, m_t1s),m_offset);

        m_lstDelay.push_back(m_delay);
        if(m_lstDelay.size() > 100)
        {
            m_lstDelay.pop_front();
        }

        time_s_ns average = std::make_pair(std::chrono::seconds(0),std::chrono::nanoseconds(0));
        for(auto delay : m_lstDelay)
        {
            average = Add(average, delay);
        }
        std::cout << "Total: " << TimeToString(average) << std::endl;
        Divide(average, m_lstDelay.size());


        std::cout << "Offset: " << TimeToString(m_offset) << std::endl;
        std::cout << "Delay: " << TimeToString(m_delay) << std::endl;
        std::cout << "Average: " << TimeToString(average) << std::endl;

        m_mDelayRequest.erase(request);
    }
}

void PtpManager::Announce(std::shared_ptr<ptpV2Header> pHeader, std::shared_ptr<ptpAnnounce> pPayload)
{

}
