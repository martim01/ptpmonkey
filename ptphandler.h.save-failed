#pragma once
#include "handler.h"
#include <string>

struct ptpHeader
{
    ptpHeader() : nVersion(0), nType(0), nMessageLength(0), nDomain(0), nFlags(0), nCorrection(0), nSequenceId(0), nControl(0), nInterval(0){}
    unsigned char nVersion;
    unsigned char nType;
    unsigned short nMessageLength;
    unsigned char nDomain;
    unsigned short nFlags;
    unsigned long long nCorrection;
    std::string sClockId;
    unsigned short nSequenceId;
    unsigned char nControl;
    unsigned char nInterval;
};

struct ptpPayload
{
    ptpPayload(std::vector<unsigned char>& vMessage);
    unsigned long long int nSeconds;
    unsigned long int nNanoSeconds;
};

struct ptpAnnounce : public ptpPayload
{
    ptpAnnounce(std::vector<unsigned char>& vMessage);
    unsigned short nUtcOffset;
    unsigned char nGrandmasterPriority1;
    unsigned long int nGrandmasterQuality;
    unsigned char nGrandmasterPriority2;
    std::string sClockId;
    unsigned short nStepsRemoved;
    unsigned char nTimeSource;
};

struct ptpDelayResponse : public ptpPayload
{
    ptpDelayResponse(std::vector<unsigned char>& vMessage);
    std::string sSourceMac;
    unsigned short nSourcePort;
};


class PtpHandler : public Handler
{
    public:
        PtpHandler(){};
        void ParseMessage(std::vector<unsigned char> vMessage) override;

        const ptpHeader& GetHeader() const
        {
            return m_header;
        }

        void OutputValues();

        enum {SYNC=0, DELAY_REQ=1, FOLLOW_UP=8, DELAY_RESP=9, ANNOUNCE=11};

    protected:
        void ParseV1(std::vector<unsigned char> vMessage);
        void ParseV2(std::vector<unsigned char> vMessage);

        void ParseV2Sync(std::vector<unsigned char> vMessage);
        void ParseV2DelayResponse(std::vector<unsigned char> vMessage);
        void ParseV2FollowUp(std::vector<unsigned char> vMessage);
        void ParseV2Announce(std::vector<unsigned char> vMessage);

        ptpHeader m_header;
        std::unique_ptr<ptpPayload> m_pPayload;


};
